<?php
namespace Sharin\Core;
use Sharin\Component;
use Sharin\Developer;
use Sharin\SharinException;
use Sharin\Utils;

/**
 * Class Router
 *
 * @package Sharin\Core
 */
class Router extends Component {

    protected static $name = 'route';

    public static function initializationize(array $config = null) {
        parent::initializationize([
            //------------------------
            //For URL route
            //------------------------
            'URI_ROUTE_ON'          => true,//总开关,是否对URI地址进行路由
            'STATIC_ROUTE_ON'       => true,
            //静态路由规则
            'STATIC_ROUTE_RULES'    => [],
            'WILDCARD_ROUTE_ON'     => false,
            //通配符路由规则,具体参考CodeIgniter
            'WILDCARD_ROUTE_RULES'  => [],
            'REGULAR_ROUTE_ON'      => true,
            //正则表达式 规则
            'REGULAR_ROUTE_RULES'   => [],

            //------------------------
            //For URL parser
            //------------------------
            //API模式，直接使用$_GET
            'API_MODE_ON'   => false,
            //API模式 对应的$_GET变量名称
            'API_MODULES_VARIABLE'      => '_m',//该模式下使用到多层模块时涉及'MM_BRIDGE'的配置
            'API_CONTROLLER_VARIABLE'   => '_c',
            'API_ACTION_VARIABLE'       => '_a',

            //普通模式
            'MASQUERADE_TAIL'   => '.html',
            //重写模式下 消除的部分，对应.htaccess文件下
            'REWRITE_HIDDEN'      => '/index.php',
            'MM_BRIDGE'     => '/',//模块与模块之间的连接
            'MC_BRIDGE'     => '/',
            'CA_BRIDGE'     => '/',
            //*** 必须保证操作与控制器之间的符号将是$_SERVER['PATH_INFO']字符串中第一个出现的,为了更好地显示URL，参数一般通过POST传递
            //特别注意的是若使用了问号，则后面的字符串将被认为是请求参数
            'AP_BRIDGE'     => '-',
            'PP_BRIDGE'     => '-',//参数与参数之间的连接桥
            'PKV_BRIDGE'    => '-',//参数的键值对之前的连接桥

            //是否开启域名部署（包括子域名部署）
            'DOMAIN_DEPLOY_ON'  => true,
            //子域名部署模式下 的 完整域名
            'DOMAIN_NAME'       =>'linzhv.com',
            //是否将子域名段和模块进行映射
            'SUBDOMAIN_AUTO_MAPPING_ON' => false,
            //子域名部署规则
            //注意参与array_flip()函数,键值互换
            'SUBDOMAIN_MAPPINIG' => [],

            //使用的协议名称
            'SERVER_PROTOCOL' => 'http',
            //使用的端口号，默认为80时会显示为隐藏
            'SERVER_PORT'   => 80,
        ]);
        self::$_config = self::convention();
    }

    /**
     * @var array
     */
    protected static $_config = [];

//----------------------------------------------------------------------------------------------------------//

    /**
     * 返回解析结果
     * @var array
     */
    private static $result = [
        'm' => null,
        'c' => null,
        'a' => null,
        'p' => null,
    ];

    /**
     * 解析URL或兼域名
     * @return array
     */
    public static function parse(){
        $result = null;
        if(self::$_config['URI_ROUTE_ON']){
            $result = self::parseRoute();
            if(null !== $result){
                return  self::$result = $result;
            }
        }
        return self::$result = self::parseURL();
    }

    /**
     * 解析URI
     * @param string $uri 请求的URI
     * @param string $hostname
     * @return array
     */
    private static function parseURL($uri=null,$hostname=null){
        if(self::$_config['API_MODE_ON']){
            //API模式下
            self::parseInAPI();
        }else{
            $uri or $uri = self::pathInfo(true);
            //解析域名部署
            if(self::$_config['DOMAIN_DEPLOY_ON']){
                $hostname or $hostname = $_SERVER['SERVER_NAME'];
                self::parseHostname($hostname);//如果绑定了模块，之后的解析将无法指定模块
            }
            //检查、寻找和解析URI路由 'URI_ROUTE_ON'
            //普通模式下解析URI地址
            self::parseInCommon($uri);
        }
        return self::$result;
    }

    /**
     * 按照API模式进行解析(都组最快)
     * 保持原样
     * @return void
     */
    private static function parseInAPI(){
        SR_DEBUG_MODE_ON and Developer::status('fetchurl_in_apimode_begin');

        $m = self::$_config['API_MODULES_VARIABLE'];
        $c = self::$_config['API_CONTROLLER_VARIABLE'];
        $a = self::$_config['API_ACTION_VARIABLE'];

        //获取模块名称
        isset($_GET[$m]) and self::$result['m'] = $_GET[$m];
        //获取控制器名称
        isset($_GET[$c]) and self::$result['c'] = $_GET[$c];
        //获取操作名称，类方法不区分大小写
        isset($_GET[$a]) and self::$result['a'] = $_GET[$a];
        //参数为剩余的变量
        unset($_GET[$m],$_GET[$c],$_GET[$a]);
        self::$result['p'] = $_GET;

        SR_DEBUG_MODE_ON and Developer::status('fetchurl_in_topspeed_end');
    }

    /**
     * 按照普通模式进行URI解析
     * @param string $uri 待解析的URI
     * @return void
     */
    private static function parseInCommon($uri){
        SR_DEBUG_MODE_ON and Developer::status('parseurl_in_common_begin');
        $ap = self::$_config['AP_BRIDGE'];
        self::stripMasqueradeTail($uri);

        //-- 解析PATHINFO --//
        //截取参数段param与定位段local
        $papos          = strpos($uri,$ap);
        $mcapart = null;
        $pparts = '';
        if(false === $papos){
            $mcapart  = trim($uri,'/');//不存在参数则认定PATH_INFO全部是MCA的部分，否则得到结果substr($uri,0,0)即空字符串
        }else{
            $mcapart  = trim(substr($uri,0,$papos),'/');
            $pparts   = substr($uri,$papos + strlen($ap));
        }

        //-- 解析MCA部分 --//
        //逆向检查CA是否存在衔接
        $mcaparsed = self::parseMCA($mcapart);
        self::$result = array_merge(self::$result,$mcaparsed);

        //-- 解析参数部分 --//
        self::$result['p'] = self::fetchKeyValuePair($pparts,self::$_config['PP_BRIDGE'],self::$_config['PKV_BRIDGE']);
        SR_DEBUG_MODE_ON and Developer::status('parseurl_in_common_end');
    }

    /**
     * 解析主机名
     * 如果找到了对应的主机名称，则绑定到对应的模块
     * @param string $hostname 访问的主机名
     * @return bool 返回是否绑定了模块
     */
    private static function parseHostname($hostname){
        $subdomain = strstr($hostname,self::$_config['DOMAIN_NAME'],true);
        if($subdomain !== false){
            $subdomain = rtrim($subdomain,'.');
            if(isset(self::$_config['SUBDOMAIN_MAPPINIG'][$subdomain])){
                self::$result['m'] = self::$_config['SUBDOMAIN_MAPPINIG'][$subdomain];
            }elseif(self::$_config['SUBDOMAIN_AUTO_MAPPING_ON']){
                if(false !== strpos($subdomain,'.')){
                    self::$result['m'] = array_map(function ($val) {
                        return Utils::styleStr($val,1);
                    }, explode('.',$subdomain));
                }else{
                    self::$result['m'] = ucfirst($subdomain);
                }
            }
        }
        return false;
    }

    /**
     * 解析"模块、控制器、操作"
     * @param $mcapart
     * @return array
     */
    private static function parseMCA($mcapart){
        $parsed = ['m'=>null,'c'=>null,'a'=>null];

        $mm  = self::$_config['MM_BRIDGE'];
        $mc = self::$_config['MC_BRIDGE'];
        $ca = self::$_config['CA_BRIDGE'];

        $capos = strrpos($mcapart,$ca);
        if(false === $capos){
            //找不到控制器与操作之间分隔符（一定不存在控制器）
            //先判断位置部分是否为空字符串来决定是否有操作名称
            if(strlen($mcapart)){
                //位置字段全部是字符串的部分
                $parsed['a'] = $mcapart;
            }else{
                //没有操作部分，MCA全部使用默认的
            }
        }else{
            //apos+CA_BRIDGE 后面的部分全部算作action
            $parsed['a'] = substr($mcapart,$capos+strlen($ca));

            //CA存在衔接符 则说明一定存在控制器
            $mcalen = strlen($mcapart);
            $mcpart = substr($mcapart,0,$capos-$mcalen);//去除了action的部分

            if(strlen($mcapart)){
                $mcpos = strrpos($mcpart,$mc);
                if(false === $mcpos){
                    //不存在模块
                    if(strlen($mcpart)){
                        //全部是控制器的部分
                        $parsed['c'] = $mcpart;
                    }else{
                        //没有控制器部分，则使用默认的
                    }
                }else{
                    //截取控制器的部分
                    $parsed['c']   = substr($mcpart,$mcpos+strlen($mc));

                    //既然存在MC衔接符 说明一定存在模块
                    $mpart = substr($mcpart,0,$mcpos-strlen($mcpart));//以下的全是模块部分的字符串
                    if(strlen($mpart)){
                        if(false === strpos($mpart,$mm)){
                            $parsed['m'] = $mpart;
                        }else{
                            $parsed['m'] = explode($mm,$mpart);
                        }
                    }else{
                        //一般存在衔接符的情况下不为空,但也考虑下特殊情况
                    }
                }
            }else{
                //一般存在衔接符的情况下不为空,但也考虑下特殊情况
            }
        }
        return $parsed;
    }
    /**
     * 删除伪装的url后缀
     * @param string|array $uri 需要去除尾巴的字符串或者字符串数组（当数组中存在其他元素时忽略）
     * @return void
     */
    private static function stripMasqueradeTail(&$uri){
        $uri = trim($uri);
        $tail = self::$_config['MASQUERADE_TAIL'];
        $position = stripos($uri,$tail);//$position === false 表示 不存在伪装的后缀或者相关带嫌疑的url部分

        if(false !== $position and strlen($uri) === ($position + strlen($tail)) ){
            //伪装的后缀存在且只出现在最后的位置时
            $uri = substr($uri,0,$position);
        }
    }

    /**
     * 解析路由规则
     * @param string|null $url 请求路径
     * @return array|null
     */
    private static function parseRoute($url=null){
        $url or $url = $_SERVER['REQUEST_URI'];

        strpos($url,'//') !== false and $url = str_replace('//','/',$url);
        //静态路由
        if(self::$_config['STATIC_ROUTE_ON'] and self::$_config['STATIC_ROUTE_RULES']){
            if(isset(self::$_config['STATIC_ROUTE_RULES'][$url])){
                return self::$_config['STATIC_ROUTE_RULES'][$url];
            }
        }
        //规则路由
        if(self::$_config['WILDCARD_ROUTE_ON'] and self::$_config['WILDCARD_ROUTE_RULES']){
            foreach(self::$_config['WILDCARD_ROUTE_RULES'] as $pattern => $rule){
                // Convert wildcards to RegEx（from CI）
                //any对应非/的任何字符,num对应数字 ,id表示identify，即标识符
                $pattern = str_replace(['[any]', '[num]', '[id]'], ['([^/]+)', '([0-9]+)', '(\w[\w_\d]?)'], $pattern);//$pattern = preg_replace('/\[.+?\]/','([^/\[\]]+)',$pattern);//非贪婪匹配
                $rst = self::_matchRegular($pattern,$rule, $url);
                if(null !== $rst) return $rst;
            }
        }
        //正则路由
        if(self::$_config['REGULAR_ROUTE_ON'] and self::$_config['REGULAR_ROUTE_RULES']){
            foreach(self::$_config['REGULAR_ROUTE_RULES'] as $pattern => $rule){
                $rst = self::_matchRegular($pattern,$rule, $url);
                if(null !== $rst) return $rst;
            }
        }
        return null;
    }

    /**
     * 使用正则表达式匹配uri
     * @param string $pattern 路由规则
     * @param array|string|callable $rule 路由导向结果
     * @param string $uri 传递进来的URL字符串
     * @return array|string|null
     */
    public static function _matchRegular($pattern, $rule, $uri){
        $result = null;
        // do the RegEx match? use '#' to ignore '/'
        if (preg_match('#^'.$pattern.'$#', $uri, $matches)) {
            if(is_array($rule)){
                $len = count($matches);
                for($i = 1; $i < $len; $i++){
                    $key = '$'.$i;
                    if(isset($rule['$'.$i])){
                        $v = (string)$rule[$key];
                        if(strpos($v,'.')){
                            $a = explode('.',$v);
                            empty($rule[$a[0]]) and $rule[$a[0]] = [];
                            $rule[$a[0]][$a[1]] = $matches[$i];
                        }else{
                            $rule[$v] = $matches[$i];
                        }
                    }else{
                        empty($rule['o']) and $rule['o'] = [];
                        $rule['o'][] = $matches[$i];
                    }
                    unset($rule[$key]);
                }
                $result = $rule;
            }elseif(is_string($rule)){
                $result = preg_replace('#^'.$pattern.'$#', $rule, $uri);//参数一代表的正则表达式从参数三的字符串中寻找匹配并替换到参数二代表的字符串中
            }elseif(is_callable($rule)){
                array_shift($matches);
                // Execute the callback using the values in matches as its parameters.
                $result = call_user_func_array($rule, $matches);//参数二是完整的匹配
                if($result === true){
                    //返回true表示直接完成
                    exit();
                }elseif(!is_string($result) and !is_array($result)){
                    //要求结果必须返回string或者数组
                    return null;
                }
            }
        }
        return $result;
    }

    /**
     * 获取解析的模块，多个模块使用'/'分隔
     * @return string
     */
    public static function getModules(){
        return self::$result['m'];
    }

    /**
     * 获取控制器
     * @return string
     */
    public static function getController(){
        return self::$result['c'];
    }

    /**
     * 获取操作名称
     * @return string
     */
    public static function getAction(){
        return self::$result['a'];
    }
    /**
     * 获取输入参数
     * @return array
     */
    public static function getParameters(){
        return [];
    }

    /**
     * 将参数序列装换成参数数组，应用Router模块的配置
     * @param string $params
     * @param string $ppb
     * @param string $pkvb
     * @return array
     * @throws SharinException
     */
    public static function fetchKeyValuePair($params,$ppb='/',$pkvb=null){//解析字符串成数组
        $pc = [];
        if(!$ppb) throw new SharinException("参数分隔符不能为空");
        if($ppb !== $pkvb){//使用不同的分割符
            $params = trim($params," {$ppb}{$pkvb}");
            $parampairs = explode($ppb,$params);
            foreach($parampairs as $val){
                $pos = strpos($val,$pkvb);
                if(false === $pos){
                    //非键值对，赋值数字键
                }else{
                    $key = substr($val,0,$pos);
                    $val = substr($val,$pos+strlen($pkvb));
                    $pc[$key] = $val;
                }
            }
        }else{//使用相同的分隔符
            $params = trim($params," {$ppb}");
            $elements = explode($ppb,$params);
            $count = count($elements);
            for($i=0; $i<$count; $i += 2){
                if(isset($elements[$i+1])){
                    $pc[$elements[$i]] = $elements[$i+1];
                }else{
                    //单个将被投入匿名参数,先废弃
                }
            }
        }
        return $pc;
    }
    /**
     * 自动从运行环境中获取URI
     * 直接访问：
     *  http://www.xor.com:8056/                => '/'
     *  http://localhost:8056/_xor/             => '/_xor/'  ****** BUG *******
     * @param bool $reget 是否重新获取，默认为false
     * @return null|string
     */
    public static function pathInfo($reget=false){
        static $uri = '/';
        if($reget or '/' === $uri){
            if(isset($_SERVER['PATH_INFO'])){
                //如果设置了PATH_INFO则直接获取之
                $uri = $_SERVER['PATH_INFO'];
            }else{
                $scriptlen = strlen($_SERVER['SCRIPT_NAME']);
                if(strlen($_SERVER['REQUEST_URI']) > $scriptlen){
                    $pos = strpos($_SERVER['REQUEST_URI'],$_SERVER['SCRIPT_NAME']);
                    if(false !== $pos){
                        //在不支持PATH_INFO...或者PATH_INFO不存在的情况下(URL省略将被认定为普通模式)
                        //REQUEST_URI获取原生的URL地址进行解析(返回脚本名称后面的部分)
                        if(0 === $pos){//PATHINFO模式
                            $uri = substr($_SERVER['REQUEST_URI'], $scriptlen);
                        }else{
                            //重写模式
                            $uri = $_SERVER['REQUEST_URI'];
                        }
                    }
                }else{}//URI短于SCRIPT_NAME，则PATH_INFO等于'/'
            }
        }
        return $uri;
    }

}
