<?php
/**
 * Email: linzongho@gmail.com
 * Github: https://github.com/linzongho/Sharin
 * User: asus
 * Date: 8/22/16
 * Time: 10:42 AM
 */
namespace Sharin\Core;
use Sharin\Component;
use Sharin\Library\Helper\Encode;
use Sharin\Utils;

/**
 * Class Storage 持久化类
 *
 * 注：
 *  一、realpath($path) 中会检查文件是否存在
 *
 * @package Sharin
 */
class Storage extends Component {

    /**
     * 目录存在与否
     */
    const IS_EMPTY  = 0;//is empty or access deny
    const IS_FILE   = 1;
    const IS_DIR    = 2;

    const ACCESS_NO_CHECK = 0;
    const READ_ACCESS = 1;
    const WRITE_ACCESS= 2;

    protected static $name = 'storage';

    /**
     * @var array
     */
    private static $_config = [];

    public static function initializationize(array $config = null){
        parent::initializationize([
            'READ_LIMIT_ON'     => true,
            'WRITE_LIMIT_ON'    => true,

            //需要注意的是可以访问scope下面的文件夹，但是不可以访问其本身
            'READABLE_SCOPE'    => SR_PATH_BASE,
            'WRITABLE_SCOPE'    => [
                SR_PATH_RUNTIME,                    //运行时文件
                SR_PATH_DATA, //运行时配置文件
            ],
        ]);
        self::$_config = self::convention();
    }
//-------------------------------- 特征方法，仅适用于文件系统的驱动 ----------------------------------------------------------------------//
    /**
     * 文件大小格式化
     * @param int $precision
     * @param int $bytes 文件大小
     * @param int $precision 保留小数点
     * @return string
     */
    public static function formatSize($bytes, $precision = 2){
        if($bytes != 0){
            $unit = [
                'TB' => 1099511627776,  // pow( 1024, 4)
                'GB' => 1073741824,		// pow( 1024, 3)
                'MB' => 1048576,		// pow( 1024, 2)
                'KB' => 1024,			// pow( 1024, 1)
                'B ' => 1,				// pow( 1024, 0)
            ];
            foreach ($unit as $un => $mag) {
                if (doubleval($bytes) >= $mag)//floatval === doubleval
                    return round($bytes / $mag, $precision).' '.$un;
            }
        }
        return '0 B';
    }

    /**
     * 获取文件权限描述字符串
     * @param $file
     * @param bool $isfile
     * @return string
     */
    public static function perm($file,$isfile=true){
        $Mode = $isfile?fileperms($file):$file;
        $theMode = ' '.decoct($Mode);
        $theMode = substr($theMode,-4);
        $Owner = array();$Group=array();$World=array();
        if ($Mode &0x1000) $Type = 'p'; // FIFO pipe
        elseif ($Mode &0x2000) $Type = 'c'; // Character special
        elseif ($Mode &0x4000) $Type = 'd'; // Directory
        elseif ($Mode &0x6000) $Type = 'b'; // Block special
        elseif ($Mode &0x8000) $Type = '-'; // Regular
        elseif ($Mode &0xA000) $Type = 'l'; // Symbolic Link
        elseif ($Mode &0xC000) $Type = 's'; // Socket
        else $Type = 'u'; // UNKNOWN

        // Determine les permissions par Groupe : ugo
        $Owner['r'] = ($Mode &00400) ? 'r' : '-';
        $Owner['w'] = ($Mode &00200) ? 'w' : '-';
        $Owner['x'] = ($Mode &00100) ? 'x' : '-';
        $Group['r'] = ($Mode &00040) ? 'r' : '-';
        $Group['w'] = ($Mode &00020) ? 'w' : '-';
        $Group['e'] = ($Mode &00010) ? 'x' : '-';
        $World['r'] = ($Mode &00004) ? 'r' : '-';
        $World['w'] = ($Mode &00002) ? 'w' : '-';
        $World['e'] = ($Mode &00001) ? 'x' : '-';

        // Adjuste pour SUID, SGID et sticky bit
        if ($Mode &0x800) $Owner['e'] = ($Owner['e'] == 'x') ? 's' : 'S';
        if ($Mode &0x400) $Group['e'] = ($Group['e'] == 'x') ? 's' : 'S';
        if ($Mode &0x200) $World['e'] = ($World['e'] == 'x') ? 't' : 'T';
        $Mode = $Type.$Owner['r'].$Owner['w'].$Owner['x'].' '.
            $Group['r'].$Group['w'].$Group['e'].' '.
            $World['r'].$World['w'].$World['e'];
        return $Mode.' ('.$theMode.') ';
    }

    /**
     * 拷贝目录
     * 选自Kokexplorer/file.function.php
     * eg:将D:/wwwroot/下面wordpress复制到
     *	D:/wwwroot/www/explorer/0000/del/1/
     * 末尾都不需要加斜杠，复制到地址如果不加源文件夹名，
     * 就会将wordpress下面文件复制到D:/wwwroot/www/explorer/0000/del/1/下面
     * $from = 'D:/wwwroot/wordpress';
     * $to = 'D:/wwwroot/www/explorer/0000/del/1/wordpress';
     *
     * @param string $source
     * @param string $dest
     * @return bool
     */
    public static function copyDir($source, $dest){
        $result = false;
        if (!$dest or $source == substr($dest,0,strlen($source))) return false;//防止父文件夹拷贝到子文件夹，无限递归
        if (is_file($source)) {
            if ($dest[strlen($dest)-1] == '/') {
                $__dest = $dest . '/' . basename($source);
            } else {
                $__dest = $dest;
            }
            $result = copy($source, $__dest);
            chmod($__dest, 0777);
        }elseif (is_dir($source)) {
            if ($dest[strlen($dest)-1] == '/') {
                $dest = $dest . basename($source);
            }
            if (!is_dir($dest)) {
                mkdir($dest,0777);
            }
            if (!$dh = opendir($source)) return false;
            while (($file = readdir($dh)) !== false) {
                if ($file != '.' && $file != '..') {
                    if (!is_dir($source . '/' . $file)) {
                        $__dest = $dest . '/' . $file;
                    } else {
                        $__dest = $dest . '/' . $file;
                    }
                    $result = self::copyDir($source . '/' . $file, $__dest);
                }
            }
            closedir($dh);
        }
        return $result;
    }

//--------------------------------------------------- 内置 ---------------------------------------------------------------//
    /**
     * 检查目标目录是否可读取 并且对目标字符串进行修正处理
     *
     * $accesspath代表的是可以访问的目录
     * $path 表示正在访问的文件或者目录
     *
     * @param string $path 路径
     * @param bool $isread 目标路径是否是读取状态，false表示即将进入写入状态
     * @return bool 表示是否可以访问
     */
    private static function checkAccessableWithRevise(string &$path,bool $isread){
        if($isread){
            $scopes = self::$_config['READABLE_SCOPE'];
            $limit =  self::$_config['READ_LIMIT_ON'];

            if(false === ($path = realpath($path))) return false; //文件不存在

        }else{
            $scopes = self::$_config['WRITABLE_SCOPE'];
            $limit =  self::$_config['WRITE_LIMIT_ON'];
        }
        if(!$limit or !$scopes) return true;//未限制或者限制区域为空

        //目录处理(路径处理，程序编码转化为系统编码) TODO:需要在windows中文版本(系统编码是GB2312)中测试编码转换问题
        $path = Encode::toSystemEncode($path);
        $temp = dirname($path);//修改的目录

        if(is_string($scopes)){
            return Utils::checkInScope($temp,$scopes);
        }else{
            foreach ($scopes as $scope) {
                if(Utils::checkInScope($temp,$scope)) return true;
            }
            return false;
        }
    }

//----------------------------------------------------------------------------------------------------------------------
//------------------------------------ 读取 -----------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------

    /**
     * 读取文件夹内容，并返回一个数组(不包含'.'和'..')
     * array(
     *      //文件名称(相对于带读取的目录而言) => 文件内容
     *      'filename' => 'file full path',
     * );
     * @param string $dirpath
     * @param callable|null $callback
     * @param bool $recursion 是否进行递归读取
     * @return array
     */
    public static function readdir(string $dirpath,bool $recursion=false,callable $callback=null){
        if(self::checkAccessableWithRevise($dirpath,true)){
            return self::_readir($dirpath,$recursion,$callback);
        }
        return [];
    }

    /**
     * @param string $dirpath
     * @param bool $recursion
     * @param callable|null $callback
     * @param bool $_isouter 辅助参数,用于判断是外部调用还是内部的
     * @return array
     */
    private static function _readir(string $dirpath,bool $recursion=false,callable $callback=null,bool $_isouter=true){
        static $relative_path = null;
        if($_isouter){
            $relative_path = $dirpath;
            if(!is_dir($dirpath)){
                //仅初期检测，后期的入口是内部（可以阻止文件的入）
                return [];
            }
        }
        $files = [];
        $handler = opendir($dirpath);
        while (($filename = readdir($handler))) {//未读到最后一个文件时候返回false,否则返回文件名称
            if ($filename === '.' or $filename === '..' ) continue;
            $path = $dirpath.DIRECTORY_SEPARATOR.$filename;//子文件的完整路径
            $iindex = Encode::toProgramEncode(substr($path,strlen($relative_path)));
            $ipath = Encode::toProgramEncode($path);
            if($callback){
                //TODO:完善遍历回调机制
                switch (gettype($result = $callback($path,$iindex))){
                    case TYPE_BOOL:
                        continue;//筛选
                    case TYPE_ARRAY:
                        $iindex = $result[0];
                        $path   = $result[1];
                        break;
                    case TYPE_STR:
                        $iindex = $result;
                        break;
                }
            }
            $files[$iindex] = $ipath;
            if($recursion and is_dir($path)){
                $files = array_merge($files,self::_readir($path,$recursion,$callback,false));//递归,不清空
            }
        }
        closedir($handler);//关闭目录指针
        return $files;
    }

    /**
     * 读取文件,参数参考read方法
     * @param string $filepath 文件路径
     * @param string $file_encoding
     * @param string $readout_encoding
     * @param int $maxlen Maximum length of data read. The default of php is to read until end of file is reached. But I limit to 4 MB
     * @return int|string 读取可访问并且未受保护（runtime/rt文件夹下的）的文件时返回文件内容，否则返回0表示无法获取（读取可访问且未受保护的文件夹内容）
     */
    public static function read(string $filepath,string $file_encoding='UTF-8',string $readout_encoding='UTF-8',int $maxlen=4094304){
        if(self::checkAccessableWithRevise($filepath,true) and is_file($filepath)){
            $content = file_get_contents($filepath,null,null,null,$maxlen);//限制大小为2M
            if(false === $content) return false;//false on failure
            if(null === $file_encoding or $file_encoding === $readout_encoding){
                return $content;//return the raw content or what the read is what the need
            }else{
                $readoutEncode = "{$readout_encoding}//IGNORE";
                if(is_string($file_encoding) and false === strpos($file_encoding,',')){
                    return iconv($file_encoding,$readoutEncode,$content);
                }
                return mb_convert_encoding($content,$readoutEncode,$file_encoding);
            }
        }
        return Storage::IS_EMPTY;
    }

    /**
     * 确定文件或者目录是否存在
     * 相当于 is_file() or is_dir()
     * @param string $filepath 文件路径
     * @param int $auth 文件权限检测
     * @return int 0表示目录不存在或者无法访问,1表示是目录 2表示是文件
     */
    public static function has(string $filepath,int $auth=0){
        if(!self::checkAccessableWithRevise($filepath,true)) return Storage::IS_EMPTY;
        $type = is_dir($filepath) ? Storage::IS_DIR : (is_file($filepath) ? Storage::IS_FILE : Storage::IS_EMPTY);
        if($auth & self::READ_ACCESS and !is_readable($filepath)){
            return Storage::IS_EMPTY;
        }
        if($auth & self::WRITE_ACCESS and !is_writable($filepath)){
            return Storage::IS_EMPTY;
        }
        return $type;
    }

    /**
     * 返回文件内容上次的修改时间
     *
     * 注意：
     *  windows下同下如果一个文件夹下级文件夹下一个文件发生了修改，那个这个下级文件文件夹的修改时间会发生变化，但是这个文件夹的修改时间不会发生变化
     *
     * @param string $filepath 文件路径
     * @param int $mtime 修改时间
     * @return int|bool 如果是修改时间的操作返回的bool;如果是获取修改时间,则返回Unix时间戳;
     */
    public static function mtime(string $filepath,int $mtime=null){
        if(!self::checkAccessableWithRevise($filepath,true)) return Storage::IS_EMPTY;
        if(null !== $mtime){
            //设置时间,需要写的权限
            return touch($filepath,$mtime);
        }else{
            return file_exists($filepath) ? filemtime($filepath) : Storage::IS_EMPTY;
        }
    }

    /**
     * 获取文件按大小
     * 注：即便filesize加了@也无法防止系统的报错
     * @param string $filepath 文件路径
     * @return int|false|null 按照字节计算的单位,返回false表示是文件夹
     */
    public static function size($filepath){
        if(!self::checkAccessableWithRevise($filepath,true)) return Storage::IS_EMPTY;//文件在保护范围内
        if(is_file($filepath)){
            return filesize($filepath);
        }elseif(is_dir($filepath)){
            return self::_sizeDir($filepath);
        }else{
            return Storage::IS_EMPTY;//文件无法访问
        }
    }

    public static function _sizeDir($dir){
        $sizeResult = 0;
        $handle = opendir($dir);
        while (false!==($FolderOrFile = readdir($handle))) {
            if($FolderOrFile != '.' && $FolderOrFile != '..') {
                $file = "$dir/$FolderOrFile";
                $sizeResult += is_dir($file)?self::_sizeDir($file) : filesize($file);
            }
        }
        closedir($handle);
        return $sizeResult;
    }

//----------------------------------------------------------------------------------------------------------------------
//------------------------------------ 写入 -----------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
    /**
     * 创建文件夹
     * @param string $dir 文件夹路径
     * @param int $mode 文件夹权限
     * @return bool 文件夹已经存在的时候返回false,目标文件夹在受保护的范围之外也会返回false,成功创建返回true
     */
    public static function mkdir($dir, $mode = 0766) {
        if(self::checkAccessableWithRevise($dir,false)) {
            if(is_dir($dir)) return chmod($dir,intval($mode, 8));;//文件夹已经存在
            return mkdir($dir,intval($mode, 8),true);
        }
        return false;
    }

    /**
     * 修改文件权限
     * @param string $path 文件路径
     * @param int $auth 文件权限
     * @return bool 是否成功修改了该文件，文件不存在或者修改失败时返回false
     */
    public static function chmod(string $path,int $auth = 0766){
        if(self::checkAccessableWithRevise($path,false)){
            return self::_chmod($path,$auth);
        }
        return false;
    }

    /**
     * 修改文件权限
     * @param string $path
     * @param int $mode
     * @return bool 文件不存在或者修改失败时返回false
     */
    private static function _chmod(string $path, int $mode){
        if (is_file($path)){
            return chmod($path,intval($mode, 8));
        } elseif (is_dir($path)){
            $mode = intval($mode, 8);
            if (!$dh = opendir($path)) return false;
            while (($file = readdir($dh)) !== false) {
                if ($file === '.' or $file === '..') continue;
                $fullpath = $path . DIRECTORY_SEPARATOR . $file;
                chmod($fullpath,$mode);
                return self::_chmod($fullpath,$mode);
            }
            closedir($dh);
            return chmod($path,$mode);
        } else {
            return false;
        }
    }

    /**
     * 设定文件的访问和修改时间
     * 注意的是:内置函数touch在文件不存在的情况下会创建新的文件,此时创建时间可能大于修改时间和访问时间
     *         但是如果是在上层目录不存在的情况下
     * @param string $filepath 文件路径
     * @param int $mtime 文件修改时间
     * @param int $atime 文件访问时间，如果未设置，则值设置为mtime相同的值
     * @return bool 是否成功 ,访问在保护范围内或者修改失败都会返回false
     */
    public static function touch($filepath, $mtime = null, $atime = null) {
        if(self::checkAccessableWithRevise($filepath,false)) {
            if(!self::makeParentDir($filepath)){
                return false;
            }
            return touch($filepath, $mtime, $atime);
        }
        return false;
    }

    /**
     * 删除文件
     * 删除目录时必须保证该目录为空,or set parameter 2 as true
     * @param string $filepath 文件或者目录的路径
     * @param bool $recursion 删除的目标是目录时,若目录下存在文件,是否进行递归删除,默认为false
     * @return bool
     */
    public static function unlink($filepath,$recursion=false){
        if(self::checkAccessableWithRevise($filepath,false)) {
            if(is_file($filepath)){
                return unlink($filepath);
            }elseif(is_dir($filepath)){
                return self::rmdir($filepath,$recursion);
            }
        }
        return false; //file do not exist
    }
    /**
     * @param string $filepath
     * @param string $content
     * @param string $write_encode Encode of the text to write
     * @param string $text_encode encode of content,it will be 'UTF-8' while scruipt file is encode with 'UTF-8',but sometime it's not expect
     * @return bool
     */
    public static function write($filepath,$content,$write_encode='UTF-8',$text_encode='UTF-8'){
        if(!self::checkAccessableWithRevise($filepath,false) or !self::makeParentDir($filepath)) return false;
        //文本编码检测
        $write_encode !== $text_encode and $content = iconv($text_encode,"{$write_encode}//IGNORE",$content);
        //文件写入
        return file_put_contents($filepath,$content) > 0;
    }

    /**
     * 将指定内容追加到文件中
     * 文件不存在时直接写入
     * @param string $filepath 文件路径
     * @param string $content 要写入的文件内容
     * @param string $write_encode 写入文件时的编码
     * @param string $text_encode 文本本身的编码格式,默认使用UTF-8的编码格式
     * @return bool 文件打开或者关闭失败也会返回false
     */
    public static function append($filepath,$content,$write_encode='UTF-8',$text_encode='UTF-8'){
        if(!self::checkAccessableWithRevise($filepath,false)) return false;
        //编码处理
        $write_encode !== $text_encode and $content = iconv($text_encode,"{$write_encode}//IGNORE",$content);
        //文件不存在时
        if (!is_file($filepath)) {
            if (self::makeParentDir($filepath)) {
                return file_put_contents($filepath,$content) > 0;
            }
        } else {
            if (false !== ($handler = fopen($filepath,'a+'))) {
                //关闭文件
                $rst = fwrite($handler,$content); //出现错误时返回false
                return fclose($handler) ? $rst > 0 : false;
            }
        }
        return false;
    }

    /**
     * 文件父目录检测
     * 不存在时创建，不可读写时
     * @param string $path the path must be encode with file system
     * @param int $auth
     * @return bool
     */
    private static function makeParentDir($path, $auth = 0766){
        $path = dirname($path);
        if(!is_dir($path)) return mkdir($path,$auth,true);
        if(!is_writeable($path) or !is_readable($path)) return self::_chmod($path,$auth);
        return true;
    }

    /**
     * 删除文件夹
     * 注意:@ rmdir($dirpath); 也无法阻止报错
     * @param string $dir 文件夹名路径
     * @param bool $recursion 是否递归删除
     * @return bool 非文件夹或者打开文件夹失败都会返回false,参数二设置成false但是目标文件夹下有文件也会返回false
     */
    private static function rmdir(string $dir,bool $recursion=false){
        if(is_dir($dir) and ($dir_handle = opendir($dir))){

            while (false !== ($file = readdir($dir_handle))) {
                if($file === '.' or $file === '..') continue;
                if(false === $recursion) {//存在其他文件或者目录,非true时循环删除
                    closedir($dir_handle);
                    return false;
                }
                $file = "{$dir}/{$file}";//$dir = SR_IS_WIN?str_replace('\\','/',"{$dir}/{$file}"):"{$dir}/{$file}"; //windows

                if(is_file($file)){
                    if(false === unlink($file)) return false;
                }elseif(is_dir($file)){
                    if(false === self::rmdir($dir,true)) return false;
                }
            }
            closedir($dir_handle);
            return rmdir($dir);
        }
        return false;
    }

}