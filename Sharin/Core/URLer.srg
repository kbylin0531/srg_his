<?php
namespace Sharin\Core;
use Sharin\SharinException;

/**
 * Class URLer URL管理类
 *
 * 作用：管理URL的创建和解析
 *
 * @package Sharin\Core
 */
class URLer extends Router {
    /**
     * 和Router共用一个配置
     * @var string
     */
    protected static $name = 'route';

    /**
     * $url规则如：
     *  .../Ma/Mb/Cc/Ad
     * 依次从后往前解析出操作，控制器，模块(如果存在模块将被认定为完整的模块路径)
     * @param string $url 快速创建的URL字符串
     * @param array $params GET参数数组
     * @return string
     */
    public static function build($url=null,array $params=[]){
        //解析参数中的$url
        $params or $params = [];
        $hashpos = strpos($url,'#');
        if($hashpos){
            $hash = substr($url,$hashpos+1);
            $url = substr($url,0,$hashpos);
        }else{
            $hash = '';
        }
        $parts = @explode('/',trim($url,'/'));

        //调用URLHelper创建URL
        $action  = array_pop($parts);
        $ctler   = $action?array_pop($parts):null;
        $modules = $ctler?$parts:null;
        $url = self::create($modules,$ctler,$action,$params);
        return $hash ? $url : "{$url}#{$hash}";
    }

    /**
     * 创建URL
     * @param string|array $modules 模块序列
     * @param string $contler 控制器名称
     * @param string $action 操作名称
     * @param array|null $params 参数
     * @return string 可以访问的URI
     */
    public static function create($modules,$contler,$action,array $params=null){
        if(self::$_config['API_MODE_ON']){
            $uri = self::getBasicUrl().self::createInAPI($modules,$contler,$action,$params);
        }else{
            //反向域名地址
            $moduleUsed = false;
            if(self::$_config['DOMAIN_DEPLOY_ON']){
                $hostname = self::createHostname($modules,$moduleUsed);//如果绑定了模块，之后的解析将无法指定模块
            }else{
                $hostname = $_SERVER['SERVER_NAME'];
            }
//            \Sharin\dumpout($modules);
            $uri = self::getBasicUrl(null,$hostname).'/'.
                self::createInCommon($moduleUsed?null:$modules,$contler,$action,$params);
        }
        return $uri;
    }


    /**
     * 按照API模式创建URL地址
     * @param array|string $modules
     * @param string $contler
     * @param string $action
     * @param array|null $params
     * @return string
     */
    private static function createInAPI($modules,$contler,$action,array $params=null){
        is_array($modules) and $modules = self::serializeModules($modules,self::$_config['MM_BRIDGE']);
        empty($params) and $params = [];
        return '?'.http_build_query(array_merge($params,array(
            self::$_config['API_MODULES_VARIABLE']       => $modules,
            self::$_config['API_CONTROLLER_VARIABLE']    => $contler,
            self::$_config['API_ACTION_VARIABLE']        => $action,
        )));
    }

    /**
     * 获取主机名称
     * @param string|array $modules
     * @param bool $flag
     * @return null|string
     */
    private static function createHostname($modules,&$flag){
        //模块标识符
        $mid = is_array($modules)?self::serializeModules($modules,self::$_config['MM_BRIDGE']):$modules;
        $rmapping = array_flip(self::$_config['SUBDOMAIN_MAPPINIG']);
        if(isset($rmapping[$mid])){
            $hostname = $rmapping[$mid];
        }elseif(self::$_config['SUBDOMAIN_AUTO_MAPPING_ON']){
            if(is_string($modules)){
                $modules = strtolower(str_replace('/','.',$modules));
            }else{
                $modules = implode('.',$modules);
            }
            $hostname = $modules;
        }else{
            return $_SERVER['SERVER_NAME'];
        }
        $flag = true;//标注模块信息已经注入到域名中了
        return $hostname.'.'.self::$_config['DOMAIN_NAME'];
    }

    /**
     * @param null $modules
     * @param null $contler
     * @param null $action
     * @param array|null $params
     * @return string
     */
    private static function createInCommon($modules=null,$contler=null,$action=null,array $params=null){
        $uri = '';
        $modules and $uri .= is_array($modules)?implode(self::$_config['MM_BRIDGE'],$modules):$modules;
        $contler and $uri .= ''===$uri?$contler:self::$_config['MC_BRIDGE'].$contler;
        $action and $uri .= self::$_config['CA_BRIDGE'].$action;
        $params and $uri .= self::$_config['AP_BRIDGE'].self::toParametersString($params,self::$_config['PP_BRIDGE'],self::$_config['PKV_BRIDGE']);
        return $uri;
    }

    /**
     * 获取基础URI
     * 当端口号为80时隐藏之
     * @param string|null $protocol 协议
     * @param string|null $hostname 主机名称
     * @param bool $full 是否取完整
     * @return string 返回URI的基础部分
     */
    private static function getBasicUrl($protocol=null,$hostname=null,$full=false){
        static $uri = [];
        $key = md5($protocol . '' . $hostname);
        if(!isset($uri[$key])){
            $uri[$key] = $full?
                (isset($protocol)?$protocol:$_SERVER['REQUEST_SCHEME']) .'://'. (isset($hostname)?$hostname:$_SERVER['SERVER_NAME']).
                (80 == $_SERVER['SERVER_PORT']?'':':'.$_SERVER['SERVER_PORT']).$_SERVER['SCRIPT_NAME']:
                $_SERVER['SCRIPT_NAME'];
        }
        return $uri[$key];
    }




    /**
     * 模块学列数组转换成模块序列字符串
     * 模块名称全部小写化
     * @param array|string $modules 模块序列
     * @param string $mmb 模块之间的间隔符
     * @return string
     */
    private static function serializeModules($modules,$mmb='/'){
        if(is_array($modules)){
            $modules = implode($mmb,$modules);
            return trim($modules,' /');
        }else{
            $modules = explode($mmb,$modules);
            foreach ($modules as &$module) {
                $module = ucfirst(trim($module));
            }
            return implode($mmb,$modules);
        }
    }

    /**
     * 将参数数组转换成参数序列，应用Router模块的配置
     * @param array $params 参数数组
     * @param string $ppb
     * @param string $pkvb
     * @return string
     * @throws SharinException
     */
    public static function toParametersString(array $params=null,$ppb='/',$pkvb=null){
        $temp = '';
        if($params){
            //参数检测
            if(!$ppb) throw new SharinException('参数目录分隔符不能为空');
            $pkvb or $pkvb = $ppb;

            $flag = true;
            foreach($params as $key => $val){
                if($flag){
                    $temp .= "{$key}{$pkvb}{$val}";
                    $flag = false;
                }else{
                    $temp .= "{$ppb}{$key}{$pkvb}{$val}";
                }
            }
        }
        return $temp;
    }
}